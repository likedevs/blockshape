{"version":3,"sources":["app.js","helpers.js","templates.js","FigureType.js","PressureType.js","System.js","FormularController.js","HistoryController.js","NavigationController.js","SearchController.js","SignupController.js","UserFormularController.js","UserRegisterController.js","ngScheduleDay.js","ngValidateCount.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtnenGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var Unica = angular.module('Unica', ['templates', 'ngMaterial', 'angular-storage'], function () {\n});\n\n/**\n * Site URL\n * @type {string}\n */\nUnica.SITE_URL = 'http://' + location.host;\nUnica.SECURE_SITE_URL = 'https://' + location.host;\n\n/**\n * JsonRPC Api URL\n * @type {string}\n */\nUnica.API_URL = (Unica.SITE_URL + '/api/v1');\nUnica.COOKIE_NAME = 'unica_nutrition';\n\nUnica.config(['$mdThemingProvider', function UnicaConfig($mdThemingProvider) {\n    // make placeholders color darkness\n    $mdThemingProvider.theme('default').foregroundPalette[3] = 'rgba(0,0,0,0.76)'\n}]);\n\nUnica.STORAGE = 'session';\n\nUnica.run(['$rootScope', function ($rootScope) {\n    // handle ajax|routeChange requests\n    (function ($rootScope) {\n        $rootScope.loadingView = false;\n        $rootScope.loadingError = false;\n\n        $rootScope.$on('$loadingResults', function (e, value) {\n            $rootScope.loadingView = value;\n        });\n        $rootScope.$on('$routeChangeStart', function (e, curr) {\n            if (curr.$$route && curr.$$route.resolve) {\n                // Show a loading message until promises are not resolved\n                $rootScope.loadingView = true;\n                $rootScope.loadingError = false;\n            }\n        });\n        $rootScope.$on('$routeChangeSuccess', function () {\n            // Hide loading message\n            $rootScope.loadingView = false;\n            $rootScope.loadingError = false;\n        });\n        $rootScope.$on('$routeChangeError', function () {\n            // Hide loading message\n            $rootScope.loadingView = false;\n            $rootScope.loadingError = true;\n        });\n    })($rootScope);\n}]);\n","(function () {\n    'use strict';\n\n    /**\n     * @param {Scope} scope\n     * @param {Function} callback\n     */\n    angular.safeApply = function (scope, callback) {\n        scope[(scope.$$phase || scope.$root.$$phase) ? '$eval' : '$apply'](callback || function () {\n            });\n    };\n\n    /**\n     * Detects if application is loaded under mobile device\n     *\n     * @todo: optimize method to increase detecting accuracy.\n     */\n    angular.isMobile = (function (a) {\n        return /((iP([oa]+d|(hone)))|Android|WebOS|BlackBerry|windows (ce|phone))/i.test(a);\n    })(navigator.userAgent || navigator.vendor || window.opera);\n\n    /**\n     * Detects device's online|offline status\n     *\n     * @returns {WorkerNavigator|Navigator|boolean}\n     */\n    angular.isOnline = function isOnline() {\n        return (window.navigator && window.navigator.onLine);\n    };\n\n    angular.findScopeWithProperty = function (scope, prop) {\n        var $parent = scope.$parent;\n        do {\n            if ($parent && $parent.hasOwnProperty(prop)) {\n                break;\n            } else if (!$parent) {\n                return null;\n            }\n            $parent = $parent.$parent;\n        } while (true);\n\n        return $parent;\n    };\n\n    angular.trackPage = function (path, title) {\n        if (typeof(ga) == 'undefined') {\n            return false;\n        }\n\n        ga('set', {\n            page: path,\n            title: title || document.title\n        });\n\n        ga('send', 'pageview');\n        // console.log(page);\n    };\n})(angular);\n\nString.prototype.ucfirst = function () {\n    var str = (this || '');\n    var f = str.charAt(0).toUpperCase();\n    return f + str.substr(1, str.length - 1);\n};\n\nString.prototype.ucwords = function () {\n    var str = (this || '');\n    var words = (str || '').split(' ').map(function (word) {\n        return word.ucfirst();\n    });\n\n    return words.join(' ');\n};","var templates = angular.module('templates', []);\ntemplates.run(['$templateCache', function($templateCache) {\n    $templateCache.put('cancel-order.html',\n        '<md-bottom-sheet class=\"md-list md-has-header\" ng-cloak>' +\n        '   <md-subheader>Anulare comandă</md-subheader>' +\n        '   <md-list>' +\n        '       <md-list-item>' +\n        '           <md-button flex ng-click=\"closeSheet()\" class=\"md-list-item-content md-raised md-default\">' +\n        '               <md-icon>check</md-icon>' +\n        '               Vreau să continui' +\n        '           </md-button>' +\n        '       </md-list-item>' +\n        '       <md-list-item>' +\n        '           <md-button flex ng-click=\"confirm()\" class=\"md-list-item-content md-raised md-warn\">' +\n        '               <md-icon>close</md-icon>' +\n        '               Vreau să anulez' +\n        '           </md-button>' +\n        '       </md-list-item>' +\n        '       <md-list-item>&nbsp;</md-list-item>' +\n        '   </md-list>' +\n        '</md-bottom-sheet>'\n    );\n\n    $templateCache.put('schedule-day.html',\n        '<div layout-padding>' +\n        '   <div layout=\"column\">' +\n        '       <div layout=\"row\">' +\n        '           <span class=\"md-display-2\" ng-class=\"{\\'required\\': ! isValid()}\">{{ weekday }}</span>' +\n        '           <md-select flex=\"10\" placeholder=\"{{ hour }}\" style=\"margin: 0 10px;\" ng-required=\"isActivityDay()\" class=\"md-mini\" ng-show=\"isActivityDay()\" ng-model=\"time\" aria-label=\"Workout time\">' +\n        '               <md-option ng-value=\"ts\" ng-repeat=\"ts in workouts\">{{ ts }}</md-option>' +\n        '           </md-select>' +\n        '           <span flex></span>' +\n        '       </div>' +\n        '       <div layout=\"row\">' +\n        '           <md-button aria-label=\"Zi de antrenament\" ng-click=\"setType(\\'activity\\')\" class=\"md-raised\" ng-class=\"{\\' md-primary\\': isActivityDay(), \\'btn-left\\': largeDevice}\">' +\n        '               <md-icon>directions_run</md-icon> Zi de antrenament' +\n        '           </md-button>' +\n        '           <md-button aria-label=\"Zi de odihna\" ng-click=\"setType(\\'rest\\')\" class=\"md-raised\" ng-class=\"{\\'md-primary\\': isRestDay(), \\'btn-middle\\': largeDevice}\">' +\n        '               <md-icon>restore</md-icon> Zi fără antrenament' +\n        '           </md-button>' +\n        '           <md-button aria-label=\"Zi de detoxifiere\" ng-click=\"setType(\\'discharging\\')\" class=\"md-raised\" ng-class=\"{\\'md-primary\\': isDetoxDay(), \\'btn-right\\': largeDevice}\">' +\n        '               <md-icon>radio_button_unchecked</md-icon> Zi de detoxifiere' +\n        '           </md-button>' +\n        '       </div>' +\n        '   </div>' +\n        '   <md-divider></md-divider>' +\n        '</div>'\n    );\n}]);\n","Unica.factory('FigureType', [function() {\n    var factory = {};\n\n    factory.detect = function($buttocks, $shoulders) {\n        if ($buttocks - $shoulders >= 6) {\n            return 2;\n        }\n\n        if ($shoulders - $buttocks >= 6) {\n            return 1;\n        }\n\n        return 3;\n    };\n\n    return factory;\n}]);","Unica.factory('PressureType', [function () {\n    var R_NORMOTONIE = 'normotonie';\n    var R_HIPOTONIE = 'hipotonie';\n    var R_HIPERTONIE = 'hipertonie';\n    var R_ATTENTION = 'attention';\n\n    var factory = {};\n\n    factory.detect = function ($before, $after) {\n        if ($before >= 140) {\n            return this.id(R_HIPERTONIE + '-' + R_ATTENTION);\n        } else {\n            $before = this.detectBeforeValue($before);\n\n            $after = this.detectAfterValue($after);\n\n            return this.id($before + '-' + $after);\n        }\n    };\n\n    /**\n     * @param $before\n     * @return string\n     */\n    factory.detectBeforeValue = function($before)\n    {\n        if ($before < 110) {\n            return R_HIPOTONIE;\n        }\n\n        return R_NORMOTONIE;\n    };\n\n    /**\n     * @param $after\n     * @return string\n     */\n    factory.detectAfterValue = function($after)\n    {\n        if ($after <= 130) {\n            return R_NORMOTONIE;\n        }\n\n        return R_HIPERTONIE;\n    };\n\n    factory.id = function($value) {\n        var $map = {\n            1 : (R_NORMOTONIE + '-' + R_NORMOTONIE),\n            2 : (R_HIPOTONIE + '-' + R_NORMOTONIE),\n            3 : (R_HIPOTONIE + '-' + R_HIPERTONIE),\n            4 : (R_HIPERTONIE + '-' + R_ATTENTION),\n            5 : (R_NORMOTONIE + '-' + R_HIPERTONIE)\n        };\n\n        for (var $id in $map) {\n            if ($map[$id] == $value) {\n                return $id;\n            }\n        }\n\n        console.log(\"Can not resolve: \" + $value);\n        return null;\n    };\n\n    return factory;\n}]);","Unica.factory('System', ['$timeout', '$http', 'aiStorage', function ($timeout, $http, aiStorage) {\n    var factory = {};\n\n    /**\n     * Fetch data from response\n     *\n     * @param response\n     * @returns {*}\n     */\n    function toData(response) {\n        return response.data.data;\n    };\n\n    function toString(response) {\n        return response.data.message;\n    }\n\n    function authData() {\n        return {\n            headers: {\n                \"X-TOKEN-ID\": aiStorage.get('unica_token', Unica.STORAGE)\n            }\n        };\n    }\n\n    factory.submitQuiz = function (data) {\n        return $http.post(location.href, data, authData()).then(toData);\n    };\n\n    factory.placeOrder = function (orderData) {\n        return $http.post('/customer/checkout', orderData, authData()).then(toData);\n    };\n\n    factory.cancelOrder = function (orderId) {\n        return $http.get('/customer/order/' + orderId + '/cancel', authData()).then(toData);\n    };\n\n    factory.requestToken = function (email) {\n        return $http.post('/auth/token', {email: email}).then(toString);\n    };\n\n    factory.confirmToken = function (email, token) {\n        return $http.post('/auth/confirm', {email: email, token: token}).then(toString);\n    };\n\n    factory.register = function (data) {\n        return $http.post('/auth/register', data).then(toString);\n    };\n\n    return factory;\n}]);\n","Unica.controller('FormularController', ['$scope', 'System', 'aiStorage', 'FigureType', 'PressureType', function ($scope, System, aiStorage, FigureType, PressureType) {\n\n    $scope.isStepValid = isStepValid;\n    $scope.setForm = setForm;\n    $scope.finish = finish;\n    $scope.setDepartment = setDepartment;\n    $scope.constitutionImage = constitutionImage;\n    $scope.requireLoadPressure = requireLoadPressure;\n\n    $scope.lists = {};\n\n    $scope.currentSlide = 0;\n\n    // department form\n    $scope.forms = {\n        department: {},\n        setup: {},\n        record: {},\n        cardio: {},\n        schedule: {},\n        diseases: {},\n        nutrition: {}\n    };\n\n    $scope.data = {};\n\n    $scope.workoutDays = 0;\n    $scope.restDays = 0;\n    $scope.dischargingDays = 0;\n    $scope.selectedDays = 0;\n\n    $scope.$watch('data', function (data, dataOld) {\n        persistForm();\n\n        // detect figure type\n        if (data.hasOwnProperty('shoulders')\n            && data.hasOwnProperty('buttocks')\n            && (data.shoulders != dataOld.shoulders || data.buttocks != dataOld.buttocks))\n        {\n            $scope.data.figure_type_id = FigureType.detect(data.buttocks, data.shoulders);\n        }\n\n        // detect pressure reaction\n        if (data.hasOwnProperty('pressure_rest')) {\n            var before = data.pressure_rest.max, beforeOld = dataOld.pressure_rest ? dataOld.pressure_rest.max : null;\n            var after = null, afterOld = dataOld.pressure_load ? dataOld.pressure_load.max : null;\n            if (data.hasOwnProperty('pressure_load')) {\n                after = data.pressure_load.max;\n            }\n\n            var cond1 = before && before != beforeOld && before >= 140;\n            var cond2 = before && after && (after != afterOld || before != beforeOld);\n            if (cond1 || cond2) {\n                //console.log('detect', cond1, cond2);\n                $scope.data.pressure_type_id = PressureType.detect(before, after);\n            }\n        }\n\n        if (data.hasOwnProperty('schedule')) {\n            var workoutDays = 0;\n            var restDays = 0;\n            var dischargingDays = 0;\n\n            for (var day in data.schedule) {\n                var options = data.schedule[day];\n\n                switch (options.type) {\n                    case 'activity':\n                        workoutDays++;\n                        break;\n\n                    case 'rest':\n                        restDays++;\n                        break;\n\n                    case 'discharging':\n                        dischargingDays++;\n                        break;\n                }\n\n            }\n\n            $scope.workoutDays = workoutDays;\n            $scope.restDays = restDays;\n            $scope.dischargingDays = dischargingDays;\n            $scope.selectedDays = (workoutDays + restDays + dischargingDays);\n        }\n    }, true);\n\n    $scope.$on('Schedule::updatedDay', function (event, options) {\n        if (!$scope.data.hasOwnProperty('schedule')) {\n            $scope.data.schedule = {};\n        }\n\n        // since only one discharging day is allowed\n        // reset previous selected discharging days\n        var day = options[0];\n        options = options[1];\n\n        if (options[day]['type'] == 'discharging') {\n            for (var _day in $scope.data.schedule) {\n                if (_day != day && $scope.data.schedule.hasOwnProperty(_day) && $scope.data.schedule[_day]['type'] == 'discharging') {\n                    $scope.data.schedule[_day]['type'] = 'rest';\n                    $scope.$broadcast('Schedule::resetDay', _day);\n                }\n            }\n        }\n\n        angular.extend($scope.data.schedule, options || {});\n    });\n\n    /**\n     * Restore form data on page reloading\n     */\n    (function restoreForm() {\n        $scope.data = (aiStorage.get('unica_value', Unica.STORAGE) || {});\n    })();\n\n    /**\n     * Save form data to the localStorage\n     */\n    function persistForm() {\n        aiStorage.set('unica_value', $scope.data, Unica.STORAGE);\n    }\n\n    function allForms() {\n        return Object.keys($scope.forms);\n    }\n\n    function setForm(form) {\n        if (form) {\n            aiStorage.set('unica_form', form, Unica.STORAGE);\n        } else if (!aiStorage.get('unica_form', Unica.STORAGE)) {\n            aiStorage.set('unica_form', allForms()[0], Unica.STORAGE);\n        }\n        $scope.currentSlide = allForms().indexOf(aiStorage.get('unica_form', Unica.STORAGE));\n        $scope.currentForm = allForms()[$scope.currentSlide];\n    };\n    setForm();\n\n    /**\n     * When accessing a property from data object => ensure that property exists\n     * @param list\n     * @returns {*}\n     */\n    function checkDataExistence(list) {\n        if (!$scope.data.hasOwnProperty(list)) {\n            $scope.data[list] = [];\n        }\n\n        return $scope.data[list];\n    }\n\n    /**\n     * Toggle item existence in a list\n     * @param item\n     * @param list\n     */\n    $scope.toggle = function (item, list) {\n        var data = checkDataExistence(list);\n\n        var idx = data.indexOf(item);\n        if (idx > -1)\n            data.splice(idx, 1);\n        else\n            data.push(item);\n    };\n\n    /**\n     * Check item existence in a list\n     *\n     * @param item\n     * @param list\n     * @returns {boolean}\n     */\n    $scope.exists = function (item, list) {\n        var data = checkDataExistence(list);\n\n        return data.indexOf(item) > -1;\n    };\n\n    /**\n     * Check if current form is valid\n     * and Instructor can go to the next page\n     */\n    function isStepValid(form) {\n        if (form) {\n            return $scope.forms[form].$valid;\n        }\n        return $scope.forms[$scope.currentForm].$valid;\n    }\n\n    /**\n     * Set fillial [office]\n     */\n    function setDepartment(dep) {\n        angular.extend($scope.data, {\n            office_id: parseInt(dep.id)\n        });\n    }\n\n    /**\n     * Get Constitution type image\n     *\n     * @returns {*}\n     */\n    function constitutionImage() {\n        var $typeId = parseInt($scope.data.figure_type_id),\n            $list = $scope.lists.figureTypes;\n\n        if (!($typeId && $list.length)) {\n            return '';\n        }\n\n        for (var $i in $list) {\n            if (parseInt($list[$i].id) == $typeId)\n                return $list[$i].image;\n        }\n\n        return '';\n    }\n\n    $scope.submitting = false;\n    function finish() {\n        $scope.submitting = true;\n        return System\n            .submitQuiz($scope.data)\n            .then(function (response) {\n                $scope.submitting = false;\n                // clean local storage\n                aiStorage.set('unica_value', {}, Unica.STORAGE);\n                aiStorage.set('unica_form', 'department', Unica.STORAGE);\n\n                // redirect to user's profile page\n                if (response.hasOwnProperty('user_id')) {\n                    window.onbeforeunload = null;\n                    location.href = '/customer/' + response.user_id;\n                }\n            }).catch(function (response) {\n                $scope.submitting = false;\n\n                if (422 == response.status) {\n                    var msgs = '';\n                    for (var field in response.data) {\n                        msgs += field.toUpperCase() + ': ' + response.data[field].join(\"\\n\");\n                    }\n\n                    alert(msgs);\n                }\n            });\n    }\n\n    /**\n     * Check if rest pressure is normal\n     * @returns {boolean}\n     */\n    function requireLoadPressure()\n    {\n        var hasRestPressure = $scope.data.hasOwnProperty('pressure_rest');\n\n        return ! hasRestPressure || (hasRestPressure && parseInt($scope.data.pressure_rest.max) < 140);\n    }\n\n    $scope.slideNext = function () {\n        $scope.currentSlide += 1;\n\n        setForm(forms()[$scope.currentSlide]);\n    };\n\n    $scope.slidePrev = function () {\n        if ($scope.currentSlide >= 1) {\n            $scope.currentSlide -= 1;\n\n            setForm(forms()[$scope.currentSlide]);\n        }\n    }\n}]);\n","Unica.controller('HistoryController', ['$scope', '$timeout', '$mdDialog', function ($scope, $timeout, $mdDialog) {\n    $scope.records = {};\n    $scope.pending = statusPending;\n    $scope.confirmed = statusConfirmed;\n    $scope.declined = statusDeclined;\n\n    $scope.key = '';\n    $scope.channel = '';\n\n    function textConfirmed(data) {\n        return 'Document for ' + data.user + ' has been confirmed';\n    }\n\n    function textDeclined(data) {\n        return 'Document for ' + data.user + ' has been declined' + (data.hasOwnProperty('reason') ? (\": \\n\" + data.reason) : '');\n    }\n\n    function translateDay(day) {\n        return {\n            'mon' : 'Luni',\n            'tue' : 'Marti',\n            'wen' : 'Miercuri',\n            'thu' : 'Joi',\n            'fri' : 'Vineri',\n            'sat' : 'Simbata',\n            'sun' : 'Duminica'\n        }[day];\n    }\n\n    function days() {\n        return ['mon', 'tue', 'wen', 'thu', 'fri', 'sat', 'sun'];\n    }\n\n    $scope.showRecordSchedule = function ($event, schedule) {\n        var parentEl = angular.element(document.body);\n        $mdDialog.show({\n            parent: parentEl,\n            targetEvent: $event,\n            template:\n            '<md-dialog aria-label=\"List dialog\">' +\n            '  <md-dialog-content>'+\n            '      <table class=\"table\">'+\n            '       <tr ng-repeat=\"day in days\">' +\n            '           <td><strong>{{ translateDay(day) }}:</strong></td>' +\n            '           <td>' +\n            '               <div ng-if=\"schedule[day].type == \\'activity\\'\">Ze de antrenament (<strong>{{ schedule[day].time }}</strong>)</div>' +\n            '               <div ng-if=\"schedule[day].type == \\'rest\\'\">Ze fara antrenament</div>' +\n            '               <div ng-if=\"schedule[day].type == \\'discharging\\'\">Ze de detox</div>' +\n            '           </td>' +\n            '       </tr>' +\n            '      </table>' +\n            '  </md-dialog-content>' +\n            '  <md-dialog-actions>' +\n            '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n            '      Inchide' +\n            '    </md-button>' +\n            '  </md-dialog-actions>' +\n            '</md-dialog>',\n            locals: {\n                schedule: schedule,\n                days: days()\n            },\n            controller: function DialogController($scope, $mdDialog, schedule, days) {\n                $scope.schedule = schedule;\n                $scope.days = days;\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();\n                };\n\n                $scope.translateDay = translateDay;\n            }\n        });\n    };\n\n    $scope.showRecordAnswers = function ($event, answers) {\n        var parentEl = angular.element(document.body);\n        $mdDialog.show({\n            parent: parentEl,\n            targetEvent: $event,\n            template:\n            '<md-dialog aria-label=\"List dialog\">' +\n            '  <md-dialog-content>'+\n            '    <md-list>' +\n            '      <ul class=\"list-unstyled\">'+\n            '       <li ng-repeat=\"question in answers\">' +\n            '           <strong>{{ question.question.question }}:</strong><br />' +\n            '           <em>&raquo;&nbsp;{{ question.answer.answer }}</em>' +\n            '       </li>' +\n            '       </ul>' +\n            '      </table>' +\n            '    </md-list>'+\n            '  </md-dialog-content>' +\n            '  <md-dialog-actions>' +\n            '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n            '      Inchide' +\n            '    </md-button>' +\n            '  </md-dialog-actions>' +\n            '</md-dialog>',\n            locals: {\n                answers: answers\n            },\n            controller: function DialogController($scope, $mdDialog, answers) {\n                $scope.answers = answers;\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();\n                };\n            }\n        });\n    };\n\n    $scope.openDialog = function (data) {\n        var alert = $mdDialog.alert({\n            title: ('confirmed' == data.status ? 'Confirmed' : 'Declined'),\n            content: ('confirmed' == data.status ? textConfirmed(data) : textDeclined(data)),\n            ok: 'Close'\n        });\n        $mdDialog\n            .show(alert)\n            .finally(function () {\n                alert = undefined;\n            });\n    };\n\n    $timeout(function () {\n        var pusher = new Pusher($scope.key, {\n            encrypted: true\n        });\n        var channel = pusher.subscribe($scope.channel);\n        channel.bind('DocumentProcessed', function (data) {\n            if (data && data.record) {\n                var id = data.record;\n\n                angular.safeApply($scope, function ($scope) {\n                    $scope.records[id].status = data.status;\n                });\n\n                $scope.openDialog(data);\n            }\n        });\n    });\n\n    function statusPending(id) {\n        return $scope.records[id].status == 'pending';\n    }\n\n    function statusDeclined(id) {\n        return $scope.records[id].status == 'declined';\n    }\n\n    function statusConfirmed(id) {\n        return $scope.records[id].status == 'confirmed';\n    }\n}]);","Unica.controller('NavigationController', ['$scope', '$mdSidenav', '$mdUtil', '$mdMedia', function($scope,  $mdSidenav, $mdUtil, $mdMedia) {\n\n    $scope.toggleLeft = buildToggler('left');\n\n\n    $scope.$watch(function() { return [$mdMedia('sm'), $mdMedia('md'), $mdMedia('lg')] }, function(big) {\n        $scope.isSmall = $mdMedia('sm');\n        $scope.isMedium = $mdMedia('md');\n        $scope.isLarge = $mdMedia('lg') || $mdMedia('gt-lg');\n\n    }, true);\n\n    /**\n     * Build handler to open/close a SideNav; when animation finishes\n     * report completion in console\n     */\n    function buildToggler(navID) {\n      var debounceFn =  $mdUtil.debounce(function(){\n            $mdSidenav(navID).toggle();\n          },300);\n      return debounceFn;\n    }\n}]);\n","Unica.controller('SearchController', ['$scope', '$http', function($scope, $http) {\n\n    $scope.searchText = '';\n\n    $scope.simulateQuery = false;\n    $scope.isDisabled    = false;\n    $scope.querySearch   = querySearch;\n    $scope.selectedItemChange = selectedItemChange;\n    \n    function querySearch (query) {\n        return $http.post('/customer/search?include=images', {\n            query: $scope.searchText\n        }).then(function(response) {\n            return response.data.data;\n        });\n    }\n\n    function selectedItemChange(item) {\n        location.href = '/customer/' + item.id;\n    }\n\n}]);\n","Unica.controller('SignupController', ['$scope', function($scope) {\n    $scope.customer = {};\n}]);\n","Unica.controller('UserFormularController', ['$scope', 'System', 'aiStorage', 'FigureType', 'PressureType', '$mdDialog', '$mdBottomSheet', function ($scope, System, aiStorage, FigureType, PressureType, $mdDialog, $mdBottomSheet) {\n\n    function validateUser() {\n        if (! aiStorage.get('unica_token', Unica.STORAGE)) {\n            clearReloadAlert();\n            location.href = '/customer/signup';\n            return false;\n        }\n    }\n\n    validateUser();\n\n    function clearReloadAlert()\n    {\n        window.onbeforeunload = null;\n    }\n\n    var $validator = setInterval(validateUser, 60000);\n\n    $scope.isStepValid = isStepValid;\n    $scope.setForm = setForm;\n    $scope.finish = finish;\n    $scope.placeOrder = placeOrder;\n    $scope.cancelOrder = cancelOrder;\n    $scope.constitutionImage = constitutionImage;\n    $scope.requireLoadPressure = requireLoadPressure;\n\n    $scope.currentSlide = 0;\n\n    var history = {\n        get: function () {\n            return $scope.data;\n        },\n        merge: function (history) {\n            $scope.data = angular.extend($scope.data, history || {});\n        },\n        checkout: {\n            offer: function () {\n                return $scope.payment.offer;\n            },\n            gateway: function () {\n                return $scope.payment.gateway\n            }\n        }\n    };\n\n    /**\n     * Initial data, listings\n     * @type {{}}\n     */\n    $scope.lists = {};\n\n    /**\n     * All forms\n     * @type {{setup: {}, record: {}, cardio: {}, schedule: {}, diseases: {}, nutrition: {}, checkout: {}}}\n     */\n    $scope.forms = {\n        setup: {},\n        record: {},\n        cardio: {},\n        schedule: {},\n        diseases: {},\n        nutrition: {},\n        checkout: {},\n        order: {}\n    };\n\n    /**\n     * Payment info\n     * @type {{}}\n     */\n    $scope.payment = {\n        gateway: 'qiwi'\n    };\n\n    /**\n     * Main form data\n     * @type {{}}\n     */\n    $scope.data = {\n        /* Default schedule */\n        schedule: {\n            \"mon\": {\"type\": \"rest\"},\n            \"tue\": {\"type\": \"rest\"},\n            \"fri\": {\"type\": \"rest\"},\n            \"thu\": {\"type\": \"rest\"},\n            \"wen\": {\"type\": \"rest\"},\n            \"sat\": {\"type\": \"rest\"},\n            \"sun\": {\"type\": \"discharging\"}\n        }\n    };\n\n    /**\n     * Num of selected days with workout\n     * @type {number}\n     */\n    $scope.workoutDays = 0;\n    $scope.restDays = 0;\n    $scope.dischargingDays = 0;\n    $scope.selectedDays = 0;\n\n\n    $scope.$watch('data.pressure_rest.max', detectPressureReaction);\n    $scope.$watch('data.pressure_load.max', detectPressureReaction);\n    function detectPressureReaction() {\n        var data = history.get();\n\n        if (!(data.pressure_rest && data.pressure_rest.max)) {\n            history.merge({\n                pressure_type_id: null\n            });\n        } else {\n            var rest = parseInt(data.pressure_rest.max);\n            if (rest >= 140) {\n                history.merge({\n                    pressure_type_id: PressureType.detect(rest, null)\n                });\n            } else if (rest && data.hasOwnProperty('pressure_load') && data.pressure_load.max) {\n                var load = data.pressure_load.max;\n                history.merge({\n                    pressure_type_id: PressureType.detect(rest, load)\n                });\n            } else {\n                history.merge({\n                    pressure_type_id: null\n                });\n            }\n        }\n    }\n\n    $scope.$watch('data', persistForm, true);\n    $scope.$watch('payment', persistPayment, true);\n\n    $scope.$watch('data.shoulders', function () {\n        detectFigureType(history.get().shoulders, history.get().buttocks);\n    });\n    $scope.$watch('data.buttocks', function () {\n        detectFigureType(history.get().shoulders, history.get().buttocks);\n    });\n    function detectFigureType(shoulders, buttocks) {\n        history.merge({\n            figure_type_id: FigureType.detect(buttocks, shoulders)\n        });\n    }\n\n    $scope.$watch('data.schedule', function () {\n        var data = history.get();\n\n        var workoutDays = 0;\n        var restDays = 0;\n        var dischargingDays = 0;\n\n        for (var day in data.schedule) {\n            var options = data.schedule[day];\n            switch (options.type) {\n                case 'activity':\n                    workoutDays++;\n                    break;\n\n                case 'rest':\n                    restDays++;\n                    break;\n\n                case 'discharging':\n                    dischargingDays++;\n                    break;\n            }\n        }\n\n        $scope.workoutDays = workoutDays;\n        $scope.restDays = restDays;\n        $scope.dischargingDays = dischargingDays;\n\n        $scope.selectedDays = (workoutDays + restDays + dischargingDays);\n    }, true);\n\n    $scope.$on('Schedule::updatedDay', function (event, options) {\n        if (!$scope.data.hasOwnProperty('schedule')) {\n            $scope.data.schedule = {};\n        }\n\n        // since only one discharging day is allowed\n        // reset previous selected discharging days\n        var day = options[0];\n        options = options[1];\n\n        if (options[day]['type'] == 'discharging') {\n            for (var _day in $scope.data.schedule) {\n                if (_day != day && $scope.data.schedule.hasOwnProperty(_day) && $scope.data.schedule[_day]['type'] == 'discharging') {\n                    $scope.data.schedule[_day]['type'] = 'rest';\n                    $scope.$broadcast('Schedule::resetDay', _day);\n                }\n            }\n        }\n\n        angular.extend($scope.data.schedule, options || {});\n    });\n\n    /**\n     * Restore forms data on page reloading\n     */\n    (function restoreForm() {\n        history.merge(aiStorage.get('unica_value', Unica.STORAGE) || {});\n    })();\n\n    (function restorePayment() {\n        $scope.payment = angular.extend($scope.payment, (aiStorage.get('unica_payment', Unica.STORAGE) || {}));\n    })();\n\n    /**\n     * Save form data to the localStorage\n     */\n    function persistForm() {\n        aiStorage.set('unica_value', $scope.data, Unica.STORAGE);\n    }\n\n    function persistPayment() {\n        aiStorage.set('unica_payment', $scope.payment, Unica.STORAGE);\n    }\n\n    function forms() {\n        return Object.keys($scope.forms);\n    }\n\n    function setForm(form) {\n        if (form) {\n            aiStorage.set('unica_form', form, Unica.STORAGE);\n        } else if (!aiStorage.get('unica_form', Unica.STORAGE)) {\n            aiStorage.set('unica_form', forms()[0], Unica.STORAGE);\n        }\n\n        $scope.currentSlide = forms().indexOf(aiStorage.get('unica_form', Unica.STORAGE));\n        $scope.currentForm = forms()[$scope.currentSlide];\n\n        angular.trackPage('/customer/health-testing/' + $scope.currentForm, 'Regim Alimentar - ' + $scope.currentForm);\n    }\n\n    setForm();\n\n    /**\n     * When accessing a property from data object => ensure that property exists\n     * @param list\n     * @returns {*}\n     */\n    function checkDataExistence(list) {\n        if (!$scope.data.hasOwnProperty(list)) {\n            $scope.data[list] = [];\n        }\n\n        return $scope.data[list];\n    }\n\n    $scope.highRestPressure = function () {\n        return $scope.data.hasOwnProperty('pressure_rest')\n            && $scope.data.pressure_rest['max'] > 130;\n    };\n\n    $scope.highLoadPressure = function () {\n        return $scope.data.hasOwnProperty('pressure_load')\n            && $scope.data.pressure_load['max'] > 130;\n    };\n\n    /**\n     * Toggle item existence in a list\n     * @param item\n     * @param list\n     */\n    $scope.toggle = function (item, list) {\n        var data = checkDataExistence(list);\n\n        var idx = data.indexOf(item);\n        if (idx > -1)\n            data.splice(idx, 1);\n        else\n            data.push(item);\n    };\n\n    /**\n     * Check item existence in a list\n     *\n     * @param item\n     * @param list\n     * @returns {boolean}\n     */\n    $scope.exists = function (item, list) {\n        var data = checkDataExistence(list);\n\n        return data.indexOf(item) > -1;\n    };\n\n    /**\n     * Check if current form is valid\n     * and Instructor can go to the next page\n     */\n    function isStepValid(form) {\n        if (form) {\n            return $scope.forms[form].$valid;\n        }\n        return $scope.forms[$scope.currentForm].$valid;\n    }\n\n    /**\n     * Get Constitution type image\n     *\n     * @returns {*}\n     */\n    function constitutionImage() {\n        var $typeId = parseInt($scope.data.figure_type_id),\n            $list = $scope.lists.figureTypes;\n\n        if (!($typeId && $list.length)) {\n            return '';\n        }\n\n        for (var $i in $list) {\n            if (parseInt($list[$i].id) == $typeId)\n                return $list[$i].image;\n        }\n\n        return '';\n    }\n\n    function alertServerError(response) {\n        $scope.submitting = false;\n\n        if (422 == response.status) {\n            var msgs = '', field;\n            for (field in response.data) {\n                if (response.data.hasOwnProperty(field)) {\n                    msgs += field.toUpperCase() + ': ' + response.data[field].join(\"\\n\");\n                }\n            }\n\n            alert(msgs);\n        }\n    }\n\n    $scope.submitting = false;\n\n    function finish() {\n        $scope.submitting = true;\n\n        return System\n            .submitQuiz($scope.data)\n            .then(function (response) {\n                $scope.submitting = false;\n\n                if (response && response.id) {\n                    history.merge(response);\n\n                    $scope.slideNext();\n                }\n            }).catch(alertServerError);\n    }\n\n    function placeOrder() {\n        $scope.submitting = true;\n\n        var orderData = {\n            history: history.get().id,\n            offer: history.checkout.offer(),\n            gateway: history.checkout.gateway()\n        };\n\n        System.placeOrder(orderData).then(function (response) {\n            $scope.submitting = false;\n\n            if (response && response.id) {\n                $scope.payment.order = response;\n\n                $scope.slideNext();\n\n                aiStorage.set('unica_form', 'setup', Unica.STORAGE);\n                aiStorage.remove('unica_value', Unica.STORAGE);\n                aiStorage.remove('unica_token', Unica.STORAGE);\n                aiStorage.remove('unica_payment', Unica.STORAGE);\n\n                clearInterval($validator);\n\n                clearReloadAlert();\n            }\n        }).catch(alertServerError);\n    }\n\n    function cancelOrder(ev) {\n        function showBottomShit(ev, callback) {\n            $mdBottomSheet.show({\n                templateUrl: 'cancel-order.html',\n                controller: ['$scope', '$mdBottomSheet', function ($scope, $mdBottomSheet) {\n                    $scope.closeSheet = function () {\n                        $mdBottomSheet.hide();\n                    };\n\n                    $scope.confirm = callback;\n                }],\n                targetEvent: ev\n            });\n        }\n\n        showBottomShit(ev, requestCancellation);\n\n        function requestCancellation() {\n            return System.cancelOrder($scope.payment.order.id).then(function () {\n                delete $scope.payment.order;\n\n                $mdBottomSheet.hide();\n                $scope.slidePrev();\n            }).catch(alertServerError);\n        }\n    }\n\n    /**\n     * Check if rest pressure is normal\n     * @returns {boolean}\n     */\n    function requireLoadPressure() {\n        if ($scope.highRestPressure()) {\n            return false;\n        }\n\n        var hasLoadPressure = history.get().hasOwnProperty('pressure_load');\n        if (hasLoadPressure && parseInt(history.get().pressure_load.max) && parseInt(history.get().pressure_load.min)) {\n            return false;\n        }\n\n        var hasRestPressure = history.get().hasOwnProperty('pressure_rest');\n\n        return (hasRestPressure && parseInt(history.get().pressure_rest.max) < 140);\n    }\n\n    function measurementImagePath(measurement) {\n        return \"/images/measurements/\" + measurement + '.jpg';\n    }\n\n    $scope.setMeasurementImage = function (measurement) {\n        $scope.measurementImage = measurementImagePath(measurement);\n    };\n\n    $scope.showMeasurementImagePopup = function (ev, measurement) {\n        var image = measurementImagePath(measurement);\n\n        $mdDialog.show({\n            clickOutsideToClose: true,\n            scope: $scope,\n            preserveScope: true,\n            template: '' +\n            '<md-dialog>' +\n            '  <md-dialog-content layout=\"column\">' +\n            '     <img src=\"' + image + '?' + ((new Date).getTime()) + '\" />' +\n            '     <md-button class=\"md-raised\" ng-click=\"closeDialog()\">Ok</md-button>' +\n            '  </md-dialog-content>' +\n            '</md-dialog>',\n            controller: function DialogController($scope, $mdDialog) {\n                $scope.closeDialog = function () {\n                    $mdDialog.hide();\n                }\n            }\n        });\n    };\n\n    $scope.offerPrice = function () {\n        if (!$scope.payment.offer) {\n            return '-';\n        }\n\n        return $scope.lists.offers.filter(function (item) {\n                return parseInt(item.id) == parseInt($scope.payment.offer);\n            })[0].price;\n    };\n\n    $scope.slideNext = function () {\n        $scope.currentSlide += 1;\n\n        setForm(forms()[$scope.currentSlide]);\n    };\n\n    $scope.slidePrev = function () {\n        if ($scope.currentSlide >= 1) {\n            $scope.currentSlide -= 1;\n\n            setForm(forms()[$scope.currentSlide]);\n        }\n    }\n}]);","Unica.controller('UserRegisterController', ['$scope', '$mdDialog', 'System', 'aiStorage', '$timeout', function ($scope, $mdDialog, System, aiStorage, $timeout) {\n\n    aiStorage.set('unica_form', 'setup', Unica.STORAGE);\n    aiStorage.remove('unica_token', Unica.STORAGE);\n    aiStorage.remove('unica_payment', Unica.STORAGE);\n    aiStorage.remove('unica_value', Unica.STORAGE);\n\n    $scope.data = {\n        genders: []\n    };\n\n    $scope.user = {\n        gender: 'female'\n    };\n\n    $scope.errors = {};\n\n    $scope.submitting = false;\n\n    // user email confirmation status\n    $scope.email = {\n        user: null,\n        token: null,\n        requested: false,\n        confirmed: false\n    };\n\n    $scope.setGender = function (gender) {\n        if (gender.disabled) {\n            showAlert('Atenție', gender.message, 'Am înțeles!');\n        } else {\n            $scope.user.gender = gender.value;\n        }\n    };\n\n    $scope.requestToken = function () {\n        angular.trackPage('/customer/signup/token-request', 'Regim Alimentar - Send validation code');\n\n        $scope.submitting = true;\n\n        System.requestToken($scope.user.email).then(function (response) {\n            if ('ok' == response) {\n                $scope.email.requested = true;\n            }\n\n            $scope.submitting = false;\n        });\n    };\n\n    function persistUser(response) {\n        if (response.user) {\n            $scope.email.user = response.user;\n        }\n\n        if (response.token) {\n            aiStorage.set('unica_token', response.token, Unica.STORAGE);\n        }\n    }\n\n    $scope.confirmToken = function () {\n        // angular.trackPage('/customer/signup/token-confirm');\n\n        $scope.submitting = true;\n        System.confirmToken($scope.user.email, $scope.email.token).then(function (response) {\n            if (response.confirmed) {\n                angular.trackPage('/customer/signup/token-confirmed', 'Regim Alimentar - Token confirmed');\n\n                $scope.email.confirmed = true;\n            }\n\n            persistUser(response);\n            $scope.submitting = false;\n        }).catch(function (response) {\n            showAlert('Atenție', response.data.description.message, 'Închide');\n            $scope.submitting = false;\n        });\n    };\n\n    $scope.goToFormular = function () {\n        location.href = $scope.email.user.form_url;\n    };\n\n    $scope.register = function () {\n        angular.trackPage('/customer/signup/register', 'Regim Alimentar - Inregistrare');\n\n        $scope.errors = {};\n\n        $scope.submitting = true;\n\n        System.register($scope.user).then(function (response) {\n            persistUser(response);\n\n            $scope.submitting = false;\n\n            if (response.user) {\n                location.href = response.user.form_url;\n            }\n        }).catch(function (response) {\n            if (response.hasOwnProperty('data') && angular.isObject(response.data)) {\n                $scope.errors = response.data;\n            }\n\n            $scope.submitting = false;\n        });\n    };\n\n    var showAlert = function(title, message, okButton) {\n        // Appending dialog to document.body to cover sidenav in docs app\n        // Modal dialogs should fully cover application\n        // to prevent interaction outside of dialog\n        $mdDialog.show(\n            $mdDialog.alert()\n                //.parent(angular.element('body'))\n                .clickOutsideToClose(true)\n                .title(title)\n                .content(message)\n                .ariaLabel(title)\n                .ok(okButton)\n        );\n    };\n\n    $scope.currentSlide = 0;\n\n    $scope.slideNext = function () {\n        $scope.currentSlide += 1;\n\n        switch ($scope.currentSlide) {\n            case 1:\n                return angular.trackPage('/customer/signup/email-request', 'Regim Alimentar - Request email');\n\n            case 2:\n                return angular.trackPage('/customer/signup/registration', 'Regim Alimentar - Registration info');\n        }\n    };\n\n    $scope.slidePrev = function () {\n        if ($scope.currentSlide > 1) {\n            $scope.currentSlide -= 1;\n        }\n    }\n}]);\n","Unica.directive('ngScheduleDay', ['$templateCache', '$mdMedia', function ($templateCache, $mdMedia) {\n    return {\n        restrict: \"E\",\n        replace: true,\n        scope: {\n            day: \"@\",\n            weekday: \"@\",\n            num: \"@\",\n            load: \"@\",\n            rest: \"@\",\n            discharging: \"@\",\n            hour: \"@\"\n        },\n        link: function (scope) {\n            scope.media = $mdMedia;\n\n            var schedule = scope.$parent.data.schedule;\n            scope.type = schedule && schedule[scope.day] && schedule[scope.day].type ? schedule[scope.day].type : null;\n            scope.time = schedule && schedule[scope.day] && schedule[scope.day].time ? schedule[scope.day].time : null;\n\n            scope.isValid = function () {\n                if (!scope.type) {\n                    return false;\n                } else if (scope.isActivityDay() && !scope.time) {\n                    return false;\n                }\n                return true;\n            };\n\n            /**\n             * Workouts time\n             */\n            scope.workouts = [\n                '07:00', '07:30',\n                '08:00', '08:30',\n                '09:00', '09:30',\n                '10:00', '10:30',\n                '11:00', '11:30',\n                '12:00', '12:30',\n                '13:00', '13:30',\n                '14:00', '14:30',\n                '15:00', '15:30',\n                '16:00', '16:30',\n                '17:00', '17:30',\n                '18:00', '18:30',\n                '19:00', '19:30',\n                '20:00', '20:30'\n            ];\n\n            function getObject() {\n                var obj = {};\n                obj[scope.day] = {\n                    type: scope.type\n                };\n                if (scope.isActivityDay()) {\n                    angular.extend(obj[scope.day], {\n                        time: scope.time\n                    });\n                }\n\n                return obj;\n            }\n\n            scope.setType = function (activity) {\n                scope.type = activity;\n\n                scope.$emit('Schedule::updatedDay', [scope.day, getObject()]);\n            };\n\n            scope.largeDevice = $mdMedia('min-width: 600px');\n\n            scope.isDetoxDay = function () {\n                return 'discharging' == scope.type;\n            };\n\n            scope.isActivityDay = function () {\n                return 'activity' == scope.type;\n            };\n\n            scope.isRestDay = function () {\n                return 'rest' == scope.type;\n            };\n\n            scope.$watch('time', function (v1, v2) {\n                if (v1 !== v2) {\n                    scope.$emit('Schedule::updatedDay', [scope.day, getObject()]);\n                }\n            });\n\n            scope.$on('Schedule::resetDay', function ($event, day) {\n                // reset day type to rest\n                if (day == scope.day) {\n                    scope.setType('rest');\n                }\n            })\n        },\n        template: $templateCache.get('schedule-day.html')\n    }\n}]);\n","Unica.directive('ngValidateCount', function () {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, element, attribs, ngModel) {\n            var minCount = parseInt(attribs.ngValidateCount);\n\n            function eq(value, minCount) {\n                return (parseInt(value) === minCount);\n            }\n\n            //For DOM -> model validation\n            function setValidity(value) {\n                ngModel.$setValidity('minCount', eq(value, minCount));\n            }\n\n            ngModel.$parsers.unshift(function (value) {\n                setValidity(value);\n                return value ? value : undefined;\n            });\n\n            ngModel.$formatters.unshift(function (value) {\n                setValidity(value);\n                return value;\n            });\n        }\n    }\n})\n"],"sourceRoot":"/source/"}